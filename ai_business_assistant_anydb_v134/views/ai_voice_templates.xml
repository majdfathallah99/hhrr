
<odoo>
  <!-- Voice Page -->
  <template id="ai_voice_page" name="AI Assistant - Voice">
    <t t-call="website.layout">
      <t t-set="title">AI Assistant - Voice</t>
      <div class="container my-4">
        <h2>🎙 Voice Conversation</h2>
        <p class="text-muted">Hold the spacebar to talk. Release to send. The assistant will speak back.</p>
        <div id="voiceLog" class="border rounded p-3 mb-3" style="height: 300px; overflow:auto;"></div>
        <div class="d-flex gap-2">
          <a class="btn btn-secondary" href="/ai_assistant">↩ Back to Chat</a>
          <button id="toggleTTS" class="btn btn-outline-secondary">Mute voice</button>
        </div>
      </div>
      <script>
        let recognizing = false;
        let ttsEnabled = true;
        function log(who, text){
          const box=document.getElementById('voiceLog');
          const div=document.createElement('div');
          div.innerHTML = '<strong>'+who+':</strong> ' + text;
          box.appendChild(div);
          box.scrollTop = box.scrollHeight;
        }
        function speak(text){
          if(!ttsEnabled) return;
          try{
            const u = new SpeechSynthesisUtterance(text);
            speechSynthesis.speak(u);
          }catch(e){/* ignore */}
        }
        async function sendToServer(text){
          try{
            const resp = await fetch('/ai_assistant/query_http', {
              method:'POST', headers:{'Content-Type':'application/json'},
              body: JSON.stringify({"jsonrpc":"2.0","method":"call","params":{"message": text}})
            });
            const j = await resp.json();
            const result = (j && j.result) ? j.result : j;
            const reply = result.text || '(no response)';
            log('Assistant', reply);
            speak(reply);
          }catch(e){
            log('Assistant', 'Network/server error.');
          }
        }
        // Web Speech API (SpeechRecognition)
        let SR = window.SpeechRecognition || window.webkitSpeechRecognition;
        let rec = null;
        if(SR){
          rec = new SR();
          rec.lang = 'en-US';
          rec.interimResults = false;
          rec.continuous = false;
          rec.onresult = (e)=>{
            const text = Array.from(e.results).map(r=>r[0].transcript).join(' ');
            log('You', text);
            sendToServer(text);
          };
          rec.onend = ()=>{ recognizing=false; };
        } else {
          log('System','SpeechRecognition not supported in this browser.');
        }
        document.addEventListener('keydown', (e)=>{
          if(e.code==='Space' && !recognizing && rec){
            recognizing=true; rec.start();
            log('System','🎤 Listening... (hold Space)');
            e.preventDefault();
          }
        });
        document.addEventListener('keyup', (e)=>{
          if(e.code==='Space' && recognizing && rec){
            rec.stop();
            log('System','⏹ Stopped.');
            recognizing=false;
            e.preventDefault();
          }
        });
        document.getElementById('toggleTTS').addEventListener('click', ()=>{
          ttsEnabled = !ttsEnabled;
          document.getElementById('toggleTTS').textContent = ttsEnabled ? 'Mute voice' : 'Unmute voice';
        });
      </script>
    </t>
  </template>
</odoo>
