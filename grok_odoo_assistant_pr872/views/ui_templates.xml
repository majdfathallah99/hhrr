<odoo>
    <template id="ui_page" name="Grok Assistant UI">
        <t t-call="web.layout">
            <div class="container" style="max-width: 920px; margin: 2rem auto;">
                <h2>Grok Assistant Pro</h2>
                <p t-esc="'Welcome, %s' % user_name"/>
                <div id="chat" style="border:1px solid #ddd; border-radius:10px; padding:1rem; min-height:320px; background:#fff;"></div>

                <div style="display:flex; gap:.5rem; margin-top:1rem;">
                    <input id="msg" placeholder="ÿßŸÉÿ™ÿ® ŸáŸÜÿß / Type here..." style="flex:1; padding:.6rem; border:1px solid #ccc; border-radius:8px"/>
                    <button id="sendBtn" class="btn btn-primary">Send</button>
                    <button id="micBtn" class="btn btn-secondary" title="Voice (STT)">üé§</button>
                    <button id="speakBtn" class="btn btn-secondary" title="Read last reply (TTS)">üó£Ô∏è</button>
                </div>

                <div style="display:flex; gap:1rem; align-items:center; margin-top:.6rem; flex-wrap:wrap;">
                    <label>Recognition:</label>
                    <select id="recLang">
                        <option value="auto">Auto</option>
                        <option value="ar-SA">Arabic (ar-SA)</option>
                        <option value="en-US">English (en-US)</option>
                    </select>
                    <label>Voice:</label>
                    <select id="voiceSel"></select>
                    <button id="testVoice" class="btn btn-light">Test Voice</button>
                    <span style="opacity:.7;">Session: <t t-esc="session_id"/></span>
                </div>

                <div id="approveBox" style="display:none; margin-top:1rem; padding:.8rem; border:1px dashed #aaa; border-radius:8px;">
                    <div id="approveText" style="margin-bottom:.5rem;"></div>
                    <button id="approveYes" class="btn btn-success">‚úÖ Approve &amp; Execute</button>
                    <button id="approveNo" class="btn btn-danger">‚úñ Cancel</button>
                </div>
            </div>

            <script type="text/javascript"><![CDATA[
            (function(){
                const sid = {{ session_id }};
                const chat = document.getElementById('chat');
                const msg = document.getElementById('msg');
                const sendBtn = document.getElementById('sendBtn');
                const micBtn = document.getElementById('micBtn');
                const speakBtn = document.getElementById('speakBtn');
                const recLang = document.getElementById('recLang');
                const voiceSel = document.getElementById('voiceSel');
                const approveBox = document.getElementById('approveBox');
                const approveText = document.getElementById('approveText');
                const approveYes = document.getElementById('approveYes');
                const approveNo = document.getElementById('approveNo');

                let pendingTool = null;
                let lastReply = "";
                let voices = [];
                let selectedVoice = null;

                function append(role, text){
                    const el = document.createElement('div');
                    el.style.margin = '.4rem 0';
                    el.innerHTML = '<b>'+role+':</b> '+(text||'').replace(/\n/g,'<br/>');
                    chat.appendChild(el);
                    chat.scrollTop = chat.scrollHeight;
                    if(role==='Assistant'){ lastReply = text || ""; }
                }

                function detectLang(s){
                    return /[\u0600-\u06FF]/.test(s) ? 'ar' : 'en';
                }

                function speak(text){
                    if(!window.speechSynthesis){ return; }
                    const u = new SpeechSynthesisUtterance(text || lastReply || '');
                    if(selectedVoice){
                        u.voice = selectedVoice;
                        u.lang = selectedVoice.lang || 'en-US';
                    }else{
                        u.lang = detectLang(text||lastReply)==='ar' ? 'ar-SA' : 'en-US';
                    }
                    window.speechSynthesis.cancel();
                    window.speechSynthesis.speak(u);
                }

                function loadVoices(){
                    voices = window.speechSynthesis ? window.speechSynthesis.getVoices() : [];
                    voiceSel.innerHTML = '';
                    voices.forEach((v,i)=>{
                        const opt = document.createElement('option');
                        opt.value = i;
                        opt.textContent = (v.name||'') + ' ['+(v.lang||'')+']';
                        voiceSel.appendChild(opt);
                    });
                    const arIndex = voices.findIndex(v=> (v.lang||'').toLowerCase().startsWith('ar'));
                    const enIndex = voices.findIndex(v=> (v.lang||'').toLowerCase().startsWith('en'));
                    let prefer = arIndex >=0 ? arIndex : (enIndex>=0 ? enIndex : 0);
                    if(prefer>=0){ voiceSel.value = String(prefer); selectedVoice = voices[prefer]; }
                }
                if(window.speechSynthesis){
                    window.speechSynthesis.onvoiceschanged = loadVoices;
                    loadVoices();
                }
                voiceSel.addEventListener('change', ()=>{
                    const idx = parseInt(voiceSel.value,10);
                    selectedVoice = voices[idx];
                });
                document.getElementById('testVoice').addEventListener('click', ()=>{
                    speak('ŸÖÿ±ÿ≠ÿ®ÿßŸã! Hello!');
                });

                async function jsonRpc(route, params){
                    const r = await fetch(route,{
                        method:'POST',
                        headers:{'Content-Type':'application/json'},
                        body: JSON.stringify({"jsonrpc":"2.0","method":"call","params":params,"id":Date.now()})
                    });
                    const j = await r.json();
                    return j.result || j;
                }

                sendBtn.addEventListener('click', async ()=>{
                    const content = (msg.value||'').trim();
                    if(!content){ return; }
                    append('You', content);
                    msg.value='';
                    approveBox.style.display = 'none';
                    pendingTool = null;
                    const res = await jsonRpc('/grok/chat_http', {message: content, session_id: sid});
                    append('Assistant', res.reply || '');
                    if(res.pending_tool){
                        pendingTool = res.pending_tool;
                        approveText.textContent = 'Pending action: ' + pendingTool;
                        approveBox.style.display = 'block';
                    }
                    speak(res.reply || '');
                });

                approveYes.addEventListener('click', async ()=>{
                    if(!pendingTool){ return; }
                    const res = await jsonRpc('/grok/chat_http', {message:'', session_id: sid, approve: true, tool_payload: pendingTool});
                    append('Assistant', res.reply || '');
                    approveBox.style.display = 'none';
                    pendingTool = null;
                    speak(res.reply || '');
                });
                approveNo.addEventListener('click', ()=>{
                    approveBox.style.display = 'none';
                    append('Assistant','(Canceled)');
                    pendingTool = null;
                });

                let recog = null;
                micBtn.addEventListener('click', ()=>{
                    const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
                    if(!SR){ alert('SpeechRecognition is not supported in this browser'); return; }
                    if(recog){ try{recog.stop();}catch(e){}; recog=null; micBtn.textContent='üé§'; return;}
                    recog = new SR();
                    let mode = recLang.value;
                    if(mode==='auto'){ mode = 'ar-SA'; }
                    recog.lang = mode;
                    recog.interimResults = false;
                    recog.maxAlternatives = 1;
                    recog.onresult = (ev)=>{
                        const t = ev.results && ev.results[0] && ev.results[0][0] ? ev.results[0][0].transcript : '';
                        if(recLang.value==='auto' && /[a-zA-Z]/.test(t)){
                            try{recog.stop();}catch(e){}; recog=null; micBtn.textContent='üé§'; msg.value = t; sendBtn.click(); return;
                        }
                        msg.value = t; sendBtn.click();
                    };
                    recog.onerror = (e)=>{ console.log('rec err', e); };
                    recog.onend = ()=>{ micBtn.textContent='üé§'; recog=null; };
                    try{ recog.start(); micBtn.textContent='‚è∫'; }catch(e){ console.log(e); }
                });

                speak('ŸÖÿ±ÿ≠ÿ®ÿßŸã! ÿßŸÉÿ™ÿ® ÿ®ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ÿ£Ÿà ÿßŸÑÿ•ŸÜÿ¨ŸÑŸäÿ≤Ÿäÿ© Ÿàÿ≥ÿ£ÿ™ÿ®ÿπ ŸÑÿ∫ÿ™ŸÉ. I can speak Arabic and English.');
            })();
            ]]></script>
        </t>
    </template>
</odoo>